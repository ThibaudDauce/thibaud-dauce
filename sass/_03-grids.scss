/* ---------------------------------- */
/* ==Grillade                         */
/* ---------------------------------- */

// Tuto : http://www.alsacreations.com/tuto/lire/1659-une-grille-responsive-avec-flexbox-et-LESS.html
// Demo : http://codepen.io/raphaelgoetter/pen/ZYjwEB

// Usage in vanilla CSS:
// - <div class="grid-4"> for an equal fourth columns grid container
// - <div class="grid-2-1"> for an uneven columns grid container

// Usage with preprocessors : if you're using Sass, you can config grids variables :
// n = number of columns (default = 4) / g = gutter value (default = 1em)
// example : .grid-perso { @include grid(12, 10px); }
// ... or uneven grids :
// left = left ratio column (default = 2) / right = right ratio column (default = 1)
// example : .grid-perso { @include uneven-grid(2, 1, 10px); }

/* grid container */
[class*="#{$kna-namespace}grid-"] {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-left: -$gutter;

  /* inline-block fallback for IE9 generation */
  letter-spacing: -0.31em;
}

/* grid childs */
[class*="#{$kna-namespace}grid-"] > * {
  box-sizing: border-box;
  flex: 0 0 auto;
  width: calc(100% * 1 / #{$number} - #{$gutter} - .01px);
  min-width: 0;
  margin-left: $gutter;

  /* inline-block fallback for IE9 generation */
  display: inline-block;
  vertical-align: top;
  letter-spacing: normal;
}

// Sass mixins for *equal* columns grid container
// example : .grid-perso { @include grid(12); }
@mixin grid($number:$number,$gutter:$gutter) {
  & > * {
    width: calc(100% * 1 / #{$number} - #{$gutter} - .01px);
  }
  & > .#{$kna-namespace}flex-item-double {
    width: calc(100% * 2 / #{$number} - #{$gutter});
  }
}

// Examples : will be compiled in CSS

[class*="#{$kna-namespace}grid-2"] {
  @include grid(2);
}

[class*="#{$kna-namespace}grid-3"] {
  @include grid(3);
}

[class*="#{$kna-namespace}grid-4"] {
  @include grid(4);
}

[class*="#{$kna-namespace}grid-5"] {
  @include grid(5);
}

[class*="#{$kna-namespace}grid-6"] {
  @include grid(6);
}

[class*="#{$kna-namespace}grid-7"] {
  @include grid(7);
}

[class*="#{$kna-namespace}grid-8"] {
  @include grid(8);
}

[class*="#{$kna-namespace}grid-10"] {
  @include grid(10);
}

[class*="#{$kna-namespace}grid-12"] {
  @include grid(12);
}

/* Responsive grid */
// "small-2" = 2 columns when small screen
// example : .grid-4-small-2 will be 4 then 2 columns
@media (max-width: $small-screen) {
  [class*="-small-4"] > * {
    width: calc(100% * 1 / 4 - #{$gutter} - .01px);
  }
  [class*="-small-4"] > .flex-item-double {
    width: calc(100% * 1 / 2 - #{$gutter} - .01px);
  }
  [class*="-small-3"] > * {
    width: calc(100% * 1 / 3 - #{$gutter} - .01px);
  }
  [class*="-small-3"] > .flex-item-double {
    width: calc(100% * 2 / 3 - #{$gutter} - .01px);
  }
  [class*="-small-2"] > * {
    width: calc(100% * 1 / 2 - #{$gutter} - .01px);
  }
  [class*="-small-2"] > .flex-item-double {
    width: calc(100% - #{$gutter} - .01px);
  }
  [class*="-small-1"] > * {
    width: calc(100% - #{$gutter} - .01px);
  }
  [class*="-small-1"] > .flex-item-double {
    width: calc(100% - #{$gutter} - .01px);
  }
}
// "tiny-1" = 1 column when tiny screen
// example : .grid-4-small-2-tiny-1 will be 4 then 2 columns then 1 column
@media (max-width: $tiny-screen) {
  [class*="-tiny-2"] > * {
    width: calc(100% * 1 / 2 - #{$gutter} - .01px);
  }
  [class*="-tiny-2"] > .flex-item-double {
    width: calc(100% - #{$gutter} - .01px);
  }
  [class*="-tiny-1"] > * {
    width: calc(100% - #{$gutter} - .01px);
  }
  [class*="-tiny-1"] > .flex-item-double {
    width: calc(100% - #{$gutter} - .01px);
  }
}

// Sass mixins for *unequal* columns grid container
// example : .grid-perso { @include uneven-grid(2, 1); }
@mixin uneven-grid($left:$left, $right:$right, $gutter:$gutter) {
  & > *:nth-child(odd) {
    $size: ($left / ($left + $right)) * 100%;
    width: calc(#{$size} - #{$gutter});
  }
  & > *:nth-child(even) {
    $size: ($right / ($left + $right)) * 100%;
    width: calc(#{$size} - #{$gutter});
  }
  @media (max-width: $small-screen) {
    & > *:nth-child(n) {
      width: calc(100% - #{$gutter});
    }
  }
}


// Examples : will be compiled in CSS

.#{$kna-namespace}grid-2-1 {
  @include uneven-grid(2,1);
}

.#{$kna-namespace}grid-1-2 {
  @include uneven-grid(1,2);
}

.#{$kna-namespace}grid-3-1 {
  @include uneven-grid(3,1);
}

.#{$kna-namespace}grid-1-3 {
  @include uneven-grid(1,3);
}

.#{$kna-namespace}grid-3-2 {
  @include uneven-grid(3,2);
}

.#{$kna-namespace}grid-2-3 {
  @include uneven-grid(2,3);
}

.#{$kna-namespace}grid-4-1 {
  @include uneven-grid(4,1);
}

.#{$kna-namespace}grid-1-4 {
  @include uneven-grid(1,4);
}

.#{$kna-namespace}pull {
  margin-right: auto;
}
.#{$kna-namespace}push {
  margin-left: auto;
}
